plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    shade
    implementation.extendsFrom shade
    cleanedAnnotations
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    minecraftLibrary('com.fasterxml.jackson.core:jackson-databind:2.14.0')
    minecraftLibrary('com.fasterxml.jackson.core:jackson-databind:2.14.0')
    minecraftLibrary('com.fasterxml.jackson.core:jackson-annotations:2.14.0')
    minecraftLibrary "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.0.0"
    minecraftLibrary 'org.jetbrains:annotations:23.0.0'
    minecraftLibrary 'org.jetbrains.kotlin:kotlin-reflect:2.0.0'

    shade 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    shade 'com.fasterxml.jackson.core:jackson-annotations:2.14.0'
    shade 'com.fasterxml.jackson.core:jackson-core:2.14.0'
    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.0.0"
    shade 'org.jetbrains.kotlin:kotlin-reflect:2.0.0'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.fasterxml.jackson.core', "${project.group}.com.example.jackson.core"
    relocate 'org.jetbrains.kotlin', "${project.group}.org.jetbrains.kotlin"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}